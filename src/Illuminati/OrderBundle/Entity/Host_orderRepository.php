<?php

namespace Illuminati\OrderBundle\Entity;

use Doctrine\Orm\Repository;

/**
 * Host_orderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Host_orderRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Fetches Host order participants orders details
     *
     * @param integer $id Host order id
     *
     * @return array participants orders details
     */
    public function findUsersOrderDetails($id)
    {
        $participantsOrders = $this->getEntityManager()->createQuery(
            'SELECT uod,p FROM Illuminati\OrderBundle\Entity\Host_order ho
            INNER JOIN Illuminati\OrderBundle\Entity\User_order_details uod WITH (ho.id = uod.hostOrderId)
            INNER JOIN Illuminati\ProductBundle\Entity\Product p WITH (uod.productId = p.id)
            WHERE  ho.id = :host_order_id AND ho.deleted = 0 AND p.deleted = 0'
        )->setParameter('host_order_id', $id)->getResult();

        // removing product entities from array for better iteration
        foreach ($participantsOrders as $key => $value) {
            if ($value instanceof \Illuminati\ProductBundle\Entity\Product) {
                unset($participantsOrders[$key]);
            }
        }

        // returning a reindexed array;
        return array_values($participantsOrders);
    }

    /**
     * Fetches host order participants orders
     *
     * @param integer $id Host Order id
     *
     * @return array Array of participants orders
     */
    public function findUserOrders($id)
    {
        $participants = $this->getEntityManager()->createQuery(
            'SELECT uo,u FROM Illuminati\UserBundle\Entity\USER u
            INNER JOIN Illuminati\OrderBundle\Entity\User_order uo WITH (u.id = uo.usersId)
            INNER JOIN Illuminati\OrderBundle\Entity\Host_order ho WITH (uo.hostOrderId = ho.id)
            WHERE ho.id = :host_order_id AND uo.deleted = 0 AND u.deleted = 0 AND ho.deleted = 0'
        )->setParameter('host_order_id', $id)->getResult();

        // removing User entities from array for better iteration
        foreach ($participants as $key => $value) {
            if ($value instanceof \Illuminati\UserBundle\Entity\User) {
                unset($participants[$key]);
            }
        }

        // returning reindexed array;
        return array_values($participants);

    }

    /**
     * Fetches host order debtors
     *
     * @param $id Host order id
     */
    public function findOrderDebtors($id)
    {
        $debtors = $this->getEntityManager()->createQuery(
            'SELECT u FROM Illuminati\OrderBundle\Entity\Host_order ho
            INNER JOIN Illuminati\OrderBundle\Entity\User_order uo WITH (ho.id = uo.hostOrderId)
            INNER JOIN Illuminati\UserBundle\Entity\USER u WITH (uo.usersId = u.id)
            WHERE ho.id = :host_order_id AND uo.payed = 0 AND uo.deleted = 0 AND u.deleted = 0 AND ho.deleted = 0'
        )->setParameter('host_order_id', $id)->getResult();

        return $debtors;
    }

    /**
     * Deletes participant from the hosted order
     *
     * @param integer $hostOrderId Host order Object
     * @param integer $userId      User Id
     *
     * @return int
     * @throws \Doctrine\DBAL\ConnectionException
     */
    public function deleteParticipant($hostOrder, $userId)
    {
        $conn = $this->getEntityManager()->getConnection();
        $conn->beginTransaction();

        try {
            $conn->executeQuery(
                'UPDATE user_order
                SET deleted = 1
                WHERE host_order_id = ? AND users_id = ?  AND deleted = 0;',
                [$hostOrder->getId(),$userId]
            );

            // checking if the user is the host of the group order
            // if yes, we close the group order

            if ($hostOrder->getUsersId()->getId() == $userId) {
                $conn->executeQuery(
                    'UPDATE host_order
                    SET deleted = 1
                    WHERE id = ?',
                    [$hostOrder->getId()]
                );
            }

            $conn->executeQuery(
                'DELETE FROM user_order_details
                WHERE host_order_id = ? AND user_id = ?;',
                [$hostOrder->getId(),$userId]
            );
            $conn->commit();
        } catch (\Exception $e) {
            $conn->rollBack();
            return false;
        }

        return true;
    }
}
